/* eslint-disable @typescript-eslint/explicit-function-return-type -- This file is outmatically generated by orval */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * dtm-database-backend
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import useSwr from 'swr';
import type { Key, SWRConfiguration } from 'swr';

export const hello = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/a`, options);
};

export const getHelloKey = () => [`/`] as const;

export type HelloQueryResult = NonNullable<Awaited<ReturnType<typeof hello>>>;
export type HelloQueryError = AxiosError;

export const useHello = <TError = AxiosError>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof hello>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getHelloKey() : null));
  const swrFn = () => hello(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const version = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/version`, options);
};

export const getVersionKey = () => [`/version`] as const;

export type VersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof version>>
>;
export type VersionQueryError = AxiosError;

export const useVersion = <TError = AxiosError>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof version>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getVersionKey() : null));
  const swrFn = () => version(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};
